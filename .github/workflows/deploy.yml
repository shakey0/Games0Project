name: Python Flask App CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FLASK_ENV: testing
      SQLALCHEMY_TEST_DATABASE_URI: postgresql://runner:runner@localhost:5432/games_0_data_test

    services:
      postgres:
        image: postgres:15
        
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: 'trust'
          POSTGRES_DB: games_0_data_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest playwright
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up Playwright
        run: playwright install

      - name: Create PostgreSQL Role
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE ROLE runner LOGIN PASSWORD 'runner';"
        env:
          PGPASSWORD: postgres

      - name: Grant Role Permissions
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE games_0_data_test TO runner;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO runner;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO runner;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT USAGE, CREATE ON SCHEMA public TO runner;"
        env:
          PGPASSWORD: postgres

      - name: Install CITEXT extension
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d games_0_data_test -c 'CREATE EXTENSION IF NOT EXISTS citext;'
        env:
          PGPASSWORD: postgres

      - name: Run Tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: pytest
